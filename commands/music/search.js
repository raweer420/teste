const { EmbedBuilder } = require('discord.js');

module.exports = {
  name: 'search',
  description: 'Pesquisa m√∫sicas no YouTube',
  aliases: ['buscar', 'find'],
  usage: '<termo de busca>',
  category: 'M√∫sica',
  async execute(message, args, client) {
    const { distube } = client;
    
    // Verificar se h√° um termo de busca
    if (!args.length) {
      return message.reply('‚ùå Por favor, informe um termo para pesquisar.');
    }
    
    const query = args.join(' ');
    
    // Enviar mensagem de carregamento
    const loadingMessage = await message.channel.send('üîç Pesquisando m√∫sicas...');
    
    try {
      // Buscar m√∫sicas
      const results = await distube.search(query, { limit: 10 });
      
      if (!results || results.length === 0) {
        return loadingMessage.edit('‚ùå Nenhum resultado encontrado!');
      }
      
      // Criar embed com os resultados
      const embed = new EmbedBuilder()
        .setTitle(`üîé Resultados para: ${query}`)
        .setColor('#36B37E')
        .setDescription(
          results.map((song, index) => 
            `**${index + 1}.** [${song.name}](${song.url}) - \`${song.formattedDuration}\``
          ).join('\n\n')
        )
        .setFooter({ text: 'Digite o n√∫mero da m√∫sica que deseja reproduzir ou "cancelar" para cancelar.' });
      
      // Enviar resultados
      await loadingMessage.edit({ content: null, embeds: [embed] });
      
      // Coletar resposta do usu√°rio
      const filter = m => m.author.id === message.author.id;
      const collector = message.channel.createMessageCollector({ filter, time: 30000, max: 1 });
      
      collector.on('collect', async msg => {
        // Verificar se o usu√°rio cancelou
        if (msg.content.toLowerCase() === 'cancelar') {
          msg.delete().catch(() => {});
          return loadingMessage.edit('üö´ Pesquisa cancelada.');
        }
        
        // Verificar se √© um n√∫mero v√°lido
        const choice = parseInt(msg.content);
        if (isNaN(choice) || choice < 1 || choice > results.length) {
          msg.delete().catch(() => {});
          return loadingMessage.edit('‚ùå N√∫mero inv√°lido! Pesquisa cancelada.');
        }
        
        // Reproduzir a m√∫sica escolhida
        msg.delete().catch(() => {});
        loadingMessage.edit(`‚úÖ Reproduzindo: **${results[choice - 1].name}**`);
        
        // Verificar se o usu√°rio est√° em um canal de voz
        if (!message.member.voice.channel) {
          return loadingMessage.edit('‚ùå Voc√™ precisa estar em um canal de voz para reproduzir m√∫sica!');
        }
        
        try {
          await distube.play(message.member.voice.channel, results[choice - 1].url, {
            member: message.member,
            textChannel: message.channel,
            message
          });
        } catch (error) {
          console.error('Erro ao reproduzir m√∫sica:', error);
          loadingMessage.edit(`‚ùå Erro ao reproduzir: ${error.message.slice(0, 1900)}`);
        }
      });
      
      collector.on('end', collected => {
        if (collected.size === 0) {
          loadingMessage.edit('‚è±Ô∏è Tempo esgotado! Pesquisa cancelada.');
        }
      });
    } catch (error) {
      console.error('Erro ao pesquisar m√∫sicas:', error);
      loadingMessage.edit(`‚ùå Erro ao pesquisar: ${error.message.slice(0, 1900)}`);
    }
  }
};